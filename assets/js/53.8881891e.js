(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{496:function(t,a,s){"use strict";s.r(a);var r=s(2),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"业务场景描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#业务场景描述"}},[t._v("#")]),t._v(" 业务场景描述")]),t._v(" "),a("blockquote",[a("p",[t._v("下单时，需要扣减库存和生成订单，两个操作要求确保同时成功或同事失败，需要分别调用不同的服务便形成了分布式事务问题")])]),t._v(" "),a("h2",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("p",[t._v("采用弱一致性的解决方案")]),t._v(" "),a("h3",{attrs:{id:"_1-重试机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-重试机制"}},[t._v("#")]),t._v(" 1.重试机制")]),t._v(" "),a("p",[t._v("第一步执行成功后，将生成订单操作发送到消息队列中，消费生成订单消息，如果失败，采用重试机制，重试后依然失败，放入死信队列中，人工介入")]),t._v(" "),a("h3",{attrs:{id:"_2-回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-回滚"}},[t._v("#")]),t._v(" 2.回滚")]),t._v(" "),a("p",[t._v("生成订单失败时，则调用库存更新接口进行回滚")]),t._v(" "),a("h3",{attrs:{id:"_3-本地消息表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-本地消息表"}},[t._v("#")]),t._v(" 3. 本地消息表")]),t._v(" "),a("p",[t._v("解决发送MQ时机器宕机\n使用本地事务当扣减库存成功时，将消息发送到一张消息表中，然后开启定时任务去将消息表中的数据发送到MQ处理")])])}),[],!1,null,null,null);a.default=_.exports}}]);