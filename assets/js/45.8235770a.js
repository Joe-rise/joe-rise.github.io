(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{486:function(e,t,i){"use strict";i.r(t);var v=i(2),_=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("hr"),e._v(" "),t("p",[e._v("挡：")]),e._v(" "),t("ul",[t("li",[e._v("挡住恶意流量，攻击")]),e._v(" "),t("li",[e._v("优化无效流量，如客户端无效重试机制")]),e._v(" "),t("li",[e._v("有效流量的降级（暂时）")])]),e._v(" "),t("p",[e._v("限流思路：\n使用redis 分布式限流： 限制每分钟用户请求次数，比如从第一次请求开始计算，60s内请求次数不得超过100次")]),e._v(" "),t("ol",[t("li",[e._v("用户第一次请求，创建redis唯一key，自增1，设置key过期时间60s")]),e._v(" "),t("li",[e._v("下次请求key值+1，并计算key值 如果大于100次，进行限流")])]),e._v(" "),t("p",[e._v("rateLimter使用原理\nrateLimter 可以实现平滑限流，即每个获取令牌的等待时间基本一致，如1s 5次，使用redis 可能在0.1s时，5次已经用完，而使用reteLimter可以分别在0.1，0.2,0.4...发放令牌")]),e._v(" "),t("p",[e._v("这种平滑限流的特性使得系统能够根据事先设定的速率进行请求的控制，避免了突发流量对系统造成的冲击和压力")]),e._v(" "),t("p",[e._v("当使用 RateLimiter 进行限流时，它会按照事先设定的速率分发令牌。如果突发流量到来，RateLimiter 会尽快分发令牌，以处理额外的请求。\n具体来说，如果在某个时间段内没有请求到达，RateLimiter 会累积未使用的令牌。当突发流量到来时，RateLimiter 会立即发放这些累积的令牌，以满足更高的请求需求。这意味着在突发流量期间，RateLimiter 会尽可能地处理更多的请求。")]),e._v(" "),t("p",[e._v("扛：")]),e._v(" "),t("ol",[t("li",[e._v("水平扩展\n横向加机器")]),e._v(" "),t("li",[e._v("垂直拆分\n微服务拆分")])])])}),[],!1,null,null,null);t.default=_.exports}}]);